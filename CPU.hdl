// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    
   Mux16(a=ALUout, b=instruction, sel=instA ,out=inA);
	Mux16(a=outA, b=inM, sel=AMtoALU, out=outAM);
	
	ARegister(in=inA, load=loadA, out=outA, out[0..14]=addressM);
	DRegister(in=ALUout, load=loadD, out=outD);
	PC( in=outA,load=loadPC, inc=true, reset=reset, out[0..14]=pc);
	ALU(x=outD, y=outAM, zx=instruction[11] ,nx=instruction[10] ,zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, out=outM, zr=zr, ng=ng);
	
	Not(in=instruction[15],out =instA);
	Not(in =instA,out =instC);
	And(a=instruction[15], b=instruction[4], out= loadD);
	
	And(a=instC, b=instruction[5], out=destA);
	Or(a=instA, b=destA, out=loadA);
	
	//pc, if is c-instruction
	//jgt - לא אפס וחיובי
	Or(a=zr, b=ng, out=out1);
	Not(in= out1, out= pos);
	And(a=instruction[0], b=pos, out=jgt);
	
	//jeq- המספר הוא שווה אפס
	And(a=instruction[1], b=zr, out=jeq);
	
	//jlt- מספר שלילי
	And(a=instruction[2], b=ng, out=jlt);
	
	//jge
	Or(a=jgt, b=jeq, out=jge);
   //jne
	Or(a=jgt, b=jlt, out=jne);
	
	//jle
	Or(a=jeq, b=jlt, out=jle);
	
	//jmp
	Or(a=jgt, b= jle, out= jmp);
	
	Or(a= jgt, b=jeq, out=j1);
	Or(a= jlt, b=j1, out=j2);
	Or(a= jge, b=j2, out=j3);
	Or(a= jne, b=j3, out=j4);
	Or(a= jle, b=j4, out=j5);
	Or(a= jmp, b=j5, out=j6);
	And(a=instC, b=j6, out=loadPC);
	
	//AMtoALU
	And(a=instC, b=instruction[12], out=AMtoALU);
	
	//loadM
	And(a=instC, b=instruction[3], out=loadM ,out=writeM);
   

	
    
    
    
}